#!/usr/bin/env python
"""Downscale and debias TraCE-21ka NetCDF files for use in LPJ-GUESS.

See README.md for more details.

Output colors with termcolor.cprint():
    - yellow: status updates
    - green: success notifications
    - cyan: skipping something
    - red: errors
"""

import os
import re
import sys

import yaml
from termcolor import cprint

from trace_for_guess.add_precc_precl import add_precc_and_precl_to_prect
from trace_for_guess.aggregate_modern_trace import aggregate_modern_trace
from trace_for_guess.aggregate_monthly_means import aggregate_monthly_means
from trace_for_guess.calculate_bias import calculate_bias
from trace_for_guess.concatenate import cat_files
from trace_for_guess.convert_time_unit import convert_time_unit
from trace_for_guess.crop import crop_file_list
from trace_for_guess.debias import debias_trace_file
from trace_for_guess.filenames import (get_cru_filenames, get_crujra_filenames,
                                       get_modern_trace_filename,
                                       get_trace_filenames)
from trace_for_guess.find_input import find_files
from trace_for_guess.prec_standard_deviation import get_prec_standard_deviation
from trace_for_guess.rescale import rescale_file
from trace_for_guess.split import split_file
from trace_for_guess.unzip import unzip_files_if_needed
from trace_for_guess.wet_days import add_wet_days_to_file

if not os.path.isfile('options.yaml'):
    cprint("Couldn’t find options file in './options.yaml'.", 'red')
    sys.exit()

cprint("Loading options from 'options.yaml'.", 'yellow')
opts = yaml.load(open('options.yaml'))
extent = opts['region']['lon'] + opts['region']['lat']
# TODO: Check if region is valid.

# Directories:
heap = opts['directories']['heap']  # Any intermediary files
out_dir = opts['directories']['output']  # All output files
cropped_dir = os.path.join(heap, 'cropped')  # Cropped files
debiased_dir = os.path.join(heap, 'debiased')
rescaled_dir = os.path.join(heap, 'rescaled')  # Rescaled files
split_dir = os.path.join(heap, 'split')  # Split, but not yet regridded files
heap_input = os.path.join(heap, 'input')  # Will be searched by find_files()

if not os.path.isdir(heap):
    cprint(f"Heap directory '{heap}' does not exist yet. I will create it.",
           'yellow')
    os.makedirs(heap)
    assert(os.path.isdir(heap))

if not os.path.isdir(heap_input):
    cprint(f"Directory '{heap_input}' does not exist yet. I will create it.",
           'yellow')
    os.makedirs(heap_input)
    assert(os.path.isdir(heap_input))

if not os.path.isdir(out_dir):
    cprint(f"Output directory '{out_dir}' does not exist yet. I will create "
           "it.", 'yellow')
    os.makedirs(out_dir)
    assert(os.path.isdir(out_dir))


# Prepare CRU and CRU-JRA files ########################################


cprint(f'Going to prepare input CRU and CRU-JRA files.', 'yellow')

# We unzip into `heap_input` so that any unzipped files are available like
# original input files.
regrid_template_file = unzip_files_if_needed(
    filenames=[opts['regrid_template_file']],
    unzip_dir=heap_input
)[0]

crujra_files = unzip_files_if_needed(
    filenames=get_crujra_filenames(),
    unzip_dir=heap_input)
crujra_files = crop_file_list(crujra_files, cropped_dir, extent)
prec_std_file = get_prec_standard_deviation(crujra_files,
                                            os.path.join(heap, 'prec_std.nc'))

cru_files = unzip_files_if_needed(
    filenames=get_cru_filenames(),
    unzip_dir=heap_input)
cru_mean_files = dict()  # Aggregated CRU files with variable as key.
for var in ['pre', 'tmp', 'wet']:
    # Filter list of all CRU files to file names containing `var`.
    files_with_var = [f for f in cru_files if var in f]
    cat = cat_files(filelist=files_with_var,
                    out_file=os.path.join(heap, '%s_cat.nc' % var))
    aggregated = os.path.join(heap, '%s_mean.nc' % var)
    cru_mean_files[var] = aggregate_monthly_means(in_file=cat,
                                                  out_file=aggregated)
    # NOTE: We assume that the CRU files are in the desired resolution.


# Calculate Bias Files #################################################


# Create means for modern TraCE files. We need them to calculate the bias.
# NOTE: We calculate the means first and then add PRECC and PRECL in the
# assumption that the order doesn’t make a difference.
cprint(f'Going to calculate means of TraCE data from modern time.', 'yellow')
modern_trace_files = dict()
for var in ['FSDS', 'PRECC', 'PRECL', 'TREFHT']:
    out_file = f'modern_trace_{var}.nc'
    modern_trace_files[var] = aggregate_modern_trace(
        trace_file=find_files(get_modern_trace_filename(var)),
        out_file=os.path.join(heap, out_file)
    )
# Merge PRECC and PRECL into PRECT.
modern_trace_files['PRECT'] = add_precc_and_precl_to_prect(
    precc_file=modern_trace_files['PRECC'],
    precl_file=modern_trace_files['PRECL'],
    prect_file=os.path.join(heap, 'modern_trace_PRECT.nc')
)
del modern_trace_files['PRECC']
del modern_trace_files['PRECL']
# Rescale modern TraCE files in heap/rescaled.
for var in modern_trace_files:
    modern_trace_files[var] = rescale_file(
        in_file=modern_trace_files[var],
        out_file=os.path.join(rescaled_dir,
                              os.path.basename(modern_trace_files[var])),
        template_file=regrid_template_file,
        alg=opts['regrid_algorithm']
    )

# Calculate bias for all variables specified in "options.yaml".
bias_files = dict()  # TraCE vs. CRU bias files with TraCE variable as key.
cprint(f'Going to calculate bias TraCE vs. CRU.', 'yellow')
for trace_var in opts['cru_vars']:
    cru_var = opts['cru_vars'][trace_var]
    trace_file = modern_trace_files[trace_var]
    bias_files[trace_var] = calculate_bias(
        trace_file=trace_file,
        trace_var=trace_var,
        cru_file=cru_mean_files[cru_var],
        cru_var=cru_var,
        bias_file=os.path.join(heap, f'bias_{trace_var}.nc')
    )


# Prepare TraCE-21ka Files #############################################


# Create all PRECT files in a special directory in the "heap", which will
# automatically be searched like an input directory.
cprint(f'Going to calculate PRECT as PRECC + PRECL.', 'yellow')
for prect in get_trace_filenames(['PRECT']):
    precc = find_files(re.sub('PRECT', 'PRECC', prect))
    precl = find_files(re.sub('PRECT', 'PRECL', prect))
    add_precc_and_precl_to_prect(precc_file=precc,
                                 precl_file=precl,
                                 prect_file=os.path.join(heap_input, prect))

# All the original TraCE-21ka files. We assume they are not zipped because they
# come as plain NetCDF files from earthsystemgrid.org.
trace_files = dict()  # Key is the variable, value is a list of file paths.
for var in ['FSDS', 'PRECT', 'TREFHT']:
    trace_files[var] = find_files(get_trace_filenames([var]))

split_trace_files = dict()
for var in trace_files:
    cprint(f"Going to crop TraCE files of variable '{var}'.", 'yellow')
    trace_files[var] = crop_file_list(trace_files[var], cropped_dir, extent)
    cprint(f"Going to split TraCE files of variable '{var}'.", 'yellow')
    split_trace_files[var] = list()
    for f in trace_files[var]:
        # In order for `cdo splitsel` to work, the time unit of the TraCE files
        # must be converted from kaBP to a standard calendar.
        convert_time_unit(f)
        split_trace_files[var] += split_file(filename=f, out_dir=split_dir)
    cprint(f"Going to rescale and debias TraCE files of variable '{var}'.",
           'yellow')
    for f in split_trace_files[var]:
        f = rescale_file(in_file=f,
                         out_file=os.path.join(rescaled_dir,
                                               os.path.basename(f)),
                         template_file=regrid_template_file,
                         alg=opts['regrid_algorithm'])
        if var in bias_files:
            f = debias_trace_file(trace_file=f,
                                  bias_file=bias_files[var],
                                  out_file=os.path.join(debiased_dir,
                                                        os.path.basename(f)))
        # if var == 'PRECT':
        #     add_wet_days_to_file(f, prec_std_file)
        # set_metadata(f, var)
        # Compress
